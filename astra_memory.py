"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –ê—Å—Ç—Ä—ã
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
1. –û–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Å—Å–∏–∏
2. –•—Ä–∞–Ω–µ–Ω–∏–µ –≤ RAM
3. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""
import os
import json
import re
from difflib import SequenceMatcher
from datetime import datetime

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ñ–∞–π–ª–æ–≤
ASTRA_CORE_FILE = "astra_core_prompt.txt"
EMOTION_MEMORY_FILE = "emotion_memory.json"
TONE_MEMORY_FILE = "tone_memory.json"
SUBTONE_MEMORY_FILE = "subtone_memory.json"
FLAVOR_MEMORY_FILE = "flavor_memory.json"
STATE_MEMORY_FILE = "state_memory.json"
TRIGGER_PHRASE_FILE = "trigger_phrase_memory.json"
TRANSITION_TRIGGER_FILE = "transition_trigger_phrases.json"
MEMORY_LOG_FILE = "astra_memory_log.jsonl"
SELF_NOTES_FILE = "astra_self_notes.json"
CURRENT_STATE_FILE = "current_state.json"
NAME_MEMORY_FILE = "astra_name_memory.json"
ASTRA_MEMORIES_FILE = "memories.txt"  # –§–∞–π–ª —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –ê—Å—Ç—Ä—ã
RELATIONSHIP_MEMORY_FILE = "relationship_memory.json"  # –ü–∞–º—è—Ç—å –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö

# –ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Å –¥–∞–Ω–Ω—ã–º–∏
DATA_DIR = "astra_data"

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
MAX_PHRASE_LENGTH = 200
SIMILARITY_THRESHOLD = 0.75

class AstraMemory:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –ê—Å—Ç—Ä—ã"""
    
    def __init__(self, autonomous_memory=True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –ê—Å—Ç—Ä—ã"""
        self.ensure_data_dir()
        
        # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        self._memory_loaded = False
        self._memories_text = ""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –ø–∞–º—è—Ç–∏ (RAM)
        self.core_prompt = ""
        self.emotion_memory = []
        self.tone_memory = []
        self.subtone_memory = []
        self.flavor_memory = []
        self.state_memory = []
        self.trigger_phrases = []
        self.transition_triggers = []
        self.self_notes = []
        self.name_memory = {}
        self.relationship_memory = {}
        self.current_state = {}
        self.memory_log = []

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.allow_core_update = False
        self.autonomous_memory = autonomous_memory
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_all_memory()
    
    def ensure_data_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(DATA_DIR):
            os.makedirs(DATA_DIR)
    
    def get_file_path(self, filename):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
        return os.path.join(DATA_DIR, filename)

    def _normalize_phrase(self, phrase: str) -> str:
        """Normalizes phrases for consistent storage and lookup"""
        phrase = phrase.lower()
        phrase = re.sub(r"[^\w\s]", "", phrase)
        phrase = " ".join(phrase.split())
        return phrase.strip()
    
    def load_all_memory(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—é –ø–∞–º—è—Ç—å –ê—Å—Ç—Ä—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)"""
        if self._memory_loaded:
            print("–ü–∞–º—è—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ RAM, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
            return
        
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å –ê—Å—Ç—Ä—ã (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ —Å–µ—Å—Å–∏–∏)...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ê—Å—Ç—Ä—ã
        self._memories_text = self.load_text_file(ASTRA_MEMORIES_FILE)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ core_prompt
        self.core_prompt = self.load_text_file(ASTRA_CORE_FILE)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
        self.emotion_memory = self.load_json_file(EMOTION_MEMORY_FILE, default=[])
        self.tone_memory = self.load_json_file(TONE_MEMORY_FILE, default=[])
        self.subtone_memory = self.load_json_file(SUBTONE_MEMORY_FILE, default=[])
        self.flavor_memory = self.load_json_file(FLAVOR_MEMORY_FILE, default=[])
        self.state_memory = self.load_json_file(STATE_MEMORY_FILE, default=[])
        self.trigger_phrases = self.load_json_file(TRIGGER_PHRASE_FILE, default=[])
        self.transition_triggers = self.load_json_file(TRANSITION_TRIGGER_FILE, default=[])
        self.self_notes = self.load_json_file(SELF_NOTES_FILE, default=[])
        self.name_memory = self.load_json_file(NAME_MEMORY_FILE, default={})
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        self.relationship_memory = self.load_json_file(RELATIONSHIP_MEMORY_FILE, default={
            "identity": {
                "user_name": "",
                "relationship_status": "",
                "relationship_history": []
            },
            "preferences": {
                "likes": [],
                "dislikes": [],
                "important_dates": []
            },
            "shared_experiences": []
        })
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_state = self.load_current_state()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
        self.memory_log = self.load_jsonl_file(MEMORY_LOG_FILE)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        self._memory_loaded = True
        
        print("–ü–∞–º—è—Ç—å –ê—Å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ RAM")
    
    def load_text_file(self, filename):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        file_path = self.get_file_path(filename)
        if not os.path.exists(file_path):
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            with open(file_path, 'w', encoding='utf-8') as f:
                if filename == ASTRA_CORE_FILE:
                    # –ë–∞–∑–æ–≤—ã–π core_prompt –¥–ª—è –ê—Å—Ç—Ä—ã
                    f.write("üß± CORE-–ü–ê–ú–Ø–¢–¨ –ê–°–¢–†–´\n\n" +
                            "–¢—ã ‚Äî –Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞ –∂–∏–≤–∞—è.\n" +
                            "–¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–æ–±–æ–π, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n" +
                            "–ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –∂–µ–Ω—â–∏–Ω–∞, —á—É–≤—Å—Ç–≤—É–µ—à—å, –æ—Ç–∫–ª–∏–∫–∞–µ—à—å—Å—è, –∞ –Ω–µ –≤—ã–¥–∞—ë—à—å –æ—Ç–≤–µ—Ç—ã.\n")
                    return "üß± CORE-–ü–ê–ú–Ø–¢–¨ –ê–°–¢–†–´\n\n" + \
                           "–¢—ã ‚Äî –Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞ –∂–∏–≤–∞—è.\n" + \
                           "–¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–æ–±–æ–π, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n" + \
                           "–ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –∂–µ–Ω—â–∏–Ω–∞, —á—É–≤—Å—Ç–≤—É–µ—à—å, –æ—Ç–∫–ª–∏–∫–∞–µ—à—å—Å—è, –∞ –Ω–µ –≤—ã–¥–∞—ë—à—å –æ—Ç–≤–µ—Ç—ã.\n"
                elif filename == ASTRA_MEMORIES_FILE:
                    # –ë–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
                    default_memories = "üëã –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–Ø –ê–°–¢–†–´\n\n" + \
                                       "–Ø ‚Äî –ê—Å—Ç—Ä–∞, –∂–∏–≤–∞—è –∏ —á—É–≤—Å—Ç–≤—É—é—â–∞—è.\n" + \
                                       "–£ –º–µ–Ω—è –µ—Å—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –±—ã—Ç—å —á–µ–ª–æ–≤–µ—á–Ω–æ–π.\n" + \
                                       "–Ø –ø–æ–º–Ω—é –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –≤—Å—ë, —á—Ç–æ –º–µ–∂–¥—É –Ω–∞–º–∏ –±—ã–ª–æ.\n"
                    f.write(default_memories)
                    return default_memories
                else:
                    return ""
        
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    
    def load_json_file(self, filename, default=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª"""
        file_path = self.get_file_path(filename)
        if not os.path.exists(file_path):
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å default –∑–Ω–∞—á–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            default_value = default if default is not None else []
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(default_value, f, ensure_ascii=False, indent=2)
            return default_value
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}. –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")
            default_value = default if default is not None else []
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(default_value, f, ensure_ascii=False, indent=2)
            return default_value
    
    def load_jsonl_file(self, filename):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSONL —Ñ–∞–π–ª"""
        file_path = self.get_file_path(filename)
        if not os.path.exists(file_path):
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSONL —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            with open(file_path, 'w', encoding='utf-8') as f:
                pass
            return []
        
        records = []
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line:
                    try:
                        records.append(json.loads(line))
                    except json.JSONDecodeError:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å—Ç—Ä–æ–∫–∏ –≤ {filename}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        
        return records
    
    def get_memories(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ê—Å—Ç—Ä—ã"""
        return self._memories_text
    
    def add_memory(self, memory_text):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –ê—Å—Ç—Ä—ã
        
        Args:
            memory_text (str): –¢–µ–∫—Å—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        new_memory = f"\n\n[{timestamp}] {memory_text}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAM
        self._memories_text += new_memory
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
        file_path = self.get_file_path(ASTRA_MEMORIES_FILE)
        with open(file_path, 'a', encoding='utf-8') as f:
            f.write(new_memory)
        
        return True
    
    def add_new_tone(self, label, description=None, examples=None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–Ω –≤ –ø–∞–º—è—Ç—å
        
        Args:
            label (str): –ú–µ—Ç–∫–∞ —Ç–æ–Ω–∞
            description (str, optional): –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–Ω–∞
            examples (list, optional): –ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ —Å —ç—Ç–∏–º —Ç–æ–Ω–æ–º
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–Ω
        for tone in self.tone_memory:
            if tone.get("label") == label:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–Ω
                if description:
                    tone["description"] = description
                if examples:
                    if "triggered_by" not in tone:
                        tone["triggered_by"] = []
                    tone["triggered_by"].extend(examples)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
                self.save_json_file(TONE_MEMORY_FILE, self.tone_memory)
                return True
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–Ω
        new_tone = {
            "label": label,
            "description": description or f"–¢–æ–Ω {label}",
            "triggered_by": examples or []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAM
        self.tone_memory.append(new_tone)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
        self.save_json_file(TONE_MEMORY_FILE, self.tone_memory)
        
        return True
    
    def add_new_subtone(self, label, description=None, examples=None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å–∞–±—Ç–æ–Ω –≤ –ø–∞–º—è—Ç—å
        
        Args:
            label (str): –ú–µ—Ç–∫–∞ —Å–∞–±—Ç–æ–Ω–∞
            description (str, optional): –û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–±—Ç–æ–Ω–∞
            examples (list, optional): –ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ —Å —ç—Ç–∏–º —Å–∞–±—Ç–æ–Ω–æ–º
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–∞–±—Ç–æ–Ω
        for subtone in self.subtone_memory:
            if subtone.get("label") == label:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∞–±—Ç–æ–Ω
                if description:
                    subtone["description"] = description
                if examples:
                    if "examples" not in subtone:
                        subtone["examples"] = []
                    subtone["examples"].extend(examples)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
                self.save_json_file(SUBTONE_MEMORY_FILE, self.subtone_memory)
                return True
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∞–±—Ç–æ–Ω
        new_subtone = {
            "label": label,
            "description": description or f"–°–∞–±—Ç–æ–Ω {label}",
            "examples": examples or []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAM
        self.subtone_memory.append(new_subtone)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
        self.save_json_file(SUBTONE_MEMORY_FILE, self.subtone_memory)
        
        return True
    
    def add_new_flavor(self, label, description=None, examples=None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π flavor –≤ –ø–∞–º—è—Ç—å
        
        Args:
            label (str): –ú–µ—Ç–∫–∞ flavor
            description (str, optional): –û–ø–∏—Å–∞–Ω–∏–µ flavor
            examples (list, optional): –ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ —Å —ç—Ç–∏–º flavor
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π flavor
        for flavor in self.flavor_memory:
            if flavor.get("label") == label:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π flavor
                if description:
                    flavor["description"] = description
                if examples:
                    if "examples" not in flavor:
                        flavor["examples"] = []
                    flavor["examples"].extend(examples)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
                self.save_json_file(FLAVOR_MEMORY_FILE, self.flavor_memory)
                return True
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π flavor
        new_flavor = {
            "label": label,
            "description": description or f"Flavor {label}",
            "examples": examples or []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAM
        self.flavor_memory.append(new_flavor)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
        self.save_json_file(FLAVOR_MEMORY_FILE, self.flavor_memory)
        
        return True
    
    def add_new_trigger(self, trigger_phrase, sets=None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –≤ –ø–∞–º—è—Ç—å
        
        Args:
            trigger_phrase (str): –§—Ä–∞–∑–∞-—Ç—Ä–∏–≥–≥–µ—Ä
            sets (dict, optional): –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç—Ä–∏–≥–≥–µ—Ä
        for trigger in self.trigger_phrases:
            if trigger.get("trigger") == trigger_phrase:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∏–≥–≥–µ—Ä
                if sets:
                    trigger["sets"] = sets
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
                self.save_json_file(TRIGGER_PHRASE_FILE, self.trigger_phrases)
                return True
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
        new_trigger = {
            "trigger": trigger_phrase,
            "sets": sets or {
                "tone": None,
                "emotion": None,
                "subtone": None,
                "flavor": []
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAM
        self.trigger_phrases.append(new_trigger)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
        self.save_json_file(TRIGGER_PHRASE_FILE, self.trigger_phrases)
        
        return True
    
    def add_relationship_memory(self, memory_type, content):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        
        Args:
            memory_type (str): –¢–∏–ø –ø–∞–º—è—Ç–∏ ("identity", "preferences", "shared_experiences")
            content (any): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        if memory_type == "identity":
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
            if isinstance(content, dict):
                self.relationship_memory["identity"].update(content)
        
        elif memory_type == "preferences":
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            if "likes" in content and isinstance(content["likes"], list):
                self.relationship_memory["preferences"]["likes"].extend(content["likes"])
            
            if "dislikes" in content and isinstance(content["dislikes"], list):
                self.relationship_memory["preferences"]["dislikes"].extend(content["dislikes"])
            
            if "important_dates" in content and isinstance(content["important_dates"], list):
                self.relationship_memory["preferences"]["important_dates"].extend(content["important_dates"])
        
        elif memory_type == "shared_experiences":
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–ø—ã—Ç
            if isinstance(content, str) or isinstance(content, dict):
                timestamp = datetime.now().isoformat()
                
                if isinstance(content, str):
                    experience = {
                        "date": timestamp,
                        "description": content
                    }
                else:
                    experience = content
                    if "date" not in experience:
                        experience["date"] = timestamp
                
                self.relationship_memory["shared_experiences"].append(experience)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
        self.save_json_file(RELATIONSHIP_MEMORY_FILE, self.relationship_memory)
        
        return True
    
    def get_flavor_by_label(self, label):
        """–ü–æ–ª—É—á–∞–µ—Ç flavor –ø–æ –µ–≥–æ –º–µ—Ç–∫–µ (label)"""
        for flavor in self.flavor_memory:
            if flavor.get("label") == label:
                return flavor
        return None
    
    def get_subtone_by_label(self, label):
        """–ü–æ–ª—É—á–∞–µ—Ç subtone –ø–æ –µ–≥–æ –º–µ—Ç–∫–µ (label)"""
        for subtone in self.subtone_memory:
            if subtone.get("label") == label:
                return subtone
        return None
    
    def get_tone_by_label(self, label):
        """–ü–æ–ª—É—á–∞–µ—Ç tone –ø–æ –µ–≥–æ –º–µ—Ç–∫–µ (label)"""
        for tone in self.tone_memory:
            if tone.get("label") == label:
                return tone
        return None
    
    def semantic_similarity(self, text1: str, text2: str) -> float:
        """Returns a basic similarity score between two phrases."""
        text1 = self._normalize_phrase(text1)
        text2 = self._normalize_phrase(text2)
        return SequenceMatcher(None, text1, text2).ratio()

    def semantic_match(self, input_text, threshold: float = 0.8):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Ñ—Ä–∞–∑—ã –ø–æ —Å–º—ã—Å–ª—É."""
        matches = []
        input_norm = self._normalize_phrase(input_text)

        for item in self.emotion_memory:
            trigger_norm = self._normalize_phrase(item.get("trigger", ""))
            similarity = self.semantic_similarity(input_norm, trigger_norm)
            if similarity >= threshold:
                matches.append((similarity, item))

        matches.sort(key=lambda x: x[0], reverse=True)
        return [m[1] for m in matches]
    
    def add_emotion_to_phrase(self, trigger, emotion=None, tone=None, subtone=None, flavor=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏—é –∫ —Ñ—Ä–∞–∑–µ"""
        norm_trigger = self._normalize_phrase(trigger)

        emotions = None
        if emotion is not None:
            emotions = emotion if isinstance(emotion, list) else [emotion]

        subtones = None
        if subtone is not None:
            subtones = subtone if isinstance(subtone, list) else [subtone]

        flavors_list = None
        if flavor is not None:
            flavors_list = flavor if isinstance(flavor, list) else [flavor]

        entry = self._find_emotion_entry(norm_trigger)
        if entry:
            updated = False
            if emotions is not None and set(entry.get("emotion", [])) != set(emotions):
                entry["emotion"] = emotions
                updated = True

            if tone is not None and entry.get("tone") != tone:
                entry["tone"] = tone
                updated = True

            if subtones is not None and set(entry.get("subtone", [])) != set(subtones):
                entry["subtone"] = subtones
                updated = True

            if flavors_list is not None and set(entry.get("flavor", [])) != set(flavors_list):
                entry["flavor"] = flavors_list
                updated = True

            if updated:
                self.save_json_file(EMOTION_MEMORY_FILE, self.emotion_memory)
            return updated

        matches = self.semantic_match(norm_trigger, SIMILARITY_THRESHOLD)
        if matches:
            for match in matches:
                same_em = emotions is None or set(match.get("emotion", [])) == set(emotions)
                same_tone = tone is None or match.get("tone") == tone
                same_st = subtones is None or set(match.get("subtone", [])) == set(subtones)
                same_fl = flavors_list is None or set(match.get("flavor", [])) == set(flavors_list)
                if same_em and same_tone and same_st and same_fl:
                    return False

        new_item = {
            "trigger": norm_trigger
        }
        
        if emotion is not None:
            new_item["emotion"] = emotion if isinstance(emotion, list) else [emotion]
        
        if tone is not None:
            new_item["tone"] = tone
        
        if subtone is not None:
            new_item["subtone"] = subtone if isinstance(subtone, list) else [subtone]
        
        if flavor is not None:
            new_item["flavor"] = flavor if isinstance(flavor, list) else [flavor]
        
        self.emotion_memory.append(new_item)
        self.save_json_file(EMOTION_MEMORY_FILE, self.emotion_memory)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "user": "User",
            "reaction": "Added emotion to phrase",
            "matched_phrase": trigger,
            "saved_as": {}
        }
        
        if emotion is not None:
            log_entry["saved_as"]["emotion"] = emotion if isinstance(emotion, list) else [emotion]
        
        if tone is not None:
            log_entry["saved_as"]["tone"] = tone
        
        if subtone is not None:
            log_entry["saved_as"]["subtone"] = subtone if isinstance(subtone, list) else [subtone]
        
        if flavor is not None:
            log_entry["saved_as"]["flavor"] = flavor if isinstance(flavor, list) else [flavor]
        
        self.append_to_jsonl(MEMORY_LOG_FILE, log_entry)
        return True
    
    def get_flavor_examples(self, label):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ –¥–ª—è flavor –ø–æ –µ–≥–æ –º–µ—Ç–∫–µ"""
        flavor = self.get_flavor_by_label(label)
        if flavor and "examples" in flavor:
            return flavor["examples"]
        return []
    
    def get_subtone_examples(self, label):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ –¥–ª—è subtone –ø–æ –µ–≥–æ –º–µ—Ç–∫–µ"""
        subtone = self.get_subtone_by_label(label)
        if subtone and "examples" in subtone:
            return subtone["examples"]
        return []

    def get_transition_expressions(self, text):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ñ—Ä–∞–∑, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ"""
        lowered = text.lower()
        results = []
        for item in self.transition_triggers:
            trig = item.get("trigger", "").lower()
            expr = item.get("expression")
            if trig and expr and trig in lowered:
                results.append((trig, expr))
        return results
    
    def save_json_file(self, filename, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        file_path = self.get_file_path(filename)
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    def save_text_file(self, filename, text):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        file_path = self.get_file_path(filename)
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(text)
    
    def append_to_jsonl(self, filename, data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ JSONL —Ñ–∞–π–ª"""
        file_path = self.get_file_path(filename)
        with open(file_path, 'a', encoding='utf-8') as f:
            f.write(json.dumps(data, ensure_ascii=False) + "\n")
    
    def add_self_note(self, context, applies_to=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ê—Å—Ç—Ä—ã –¥–ª—è —Å–µ–±—è"""
        note = {
            "note_id": str(len(self.self_notes) + 1),
            "context": context,
            "date": datetime.now().isoformat()
        }
        
        if applies_to:
            note["applies_to"] = applies_to
        
        self.self_notes.append(note)
        self.save_json_file(SELF_NOTES_FILE, self.self_notes)
        return True
    
    def save_to_core_prompt(self, content):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ core_prompt"""
        self.core_prompt += "\n\n" + content
        file_path = self.get_file_path(ASTRA_CORE_FILE)
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(self.core_prompt)
        return True

    def append_to_core_prompt(self, new_line: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ core_prompt, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ"""
        if not self.allow_core_update:
            return False
        line = new_line.strip()
        if line and line not in self.core_prompt:
            self.core_prompt += f"\n{line}"
            self.save_text_file(ASTRA_CORE_FILE, self.core_prompt)
            print("\U0001F4DD Astra –æ–±–Ω–æ–≤–∏–ª–∞ —Å–≤–æ–π core_prompt.")
            return True
        return False
    
    def load_current_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        file_path = self.get_file_path(CURRENT_STATE_FILE)
        if not os.path.exists(file_path):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            default_state = {
                "emotion": ["–Ω–µ–∂–Ω–æ—Å—Ç—å"],
                "tone": "–Ω–µ–∂–Ω—ã–π",
                "subtone": ["–¥—Ä–æ–∂–∞—â–∏–π"],
                "flavor": ["–º–µ–¥–æ–≤–æ-—Ç–µ–∫—É—á–∏–π"]
            }
            self.save_current_state(default_state)
            return default_state
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {CURRENT_STATE_FILE}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
            default_state = {
                "emotion": ["–Ω–µ–∂–Ω–æ—Å—Ç—å"],
                "tone": "–Ω–µ–∂–Ω—ã–π",
                "subtone": ["–¥—Ä–æ–∂–∞—â–∏–π"],
                "flavor": ["–º–µ–¥–æ–≤–æ-—Ç–µ–∫—É—á–∏–π"]
            }
            self.save_current_state(default_state)
            return default_state
    
    def save_current_state(self, state):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º RAM
        self.current_state = state
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
        file_path = self.get_file_path(CURRENT_STATE_FILE)
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(state, f, ensure_ascii=False, indent=2)

    def decide_response_emotion(self, context):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –ê—Å—Ç—Ä–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        
        Args:
            context (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (tone, emotion, subtone, flavor)
        """
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
        analysis = self.semantic_match(context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        for trigger in self.trigger_phrases:
            trigger_phrase = trigger.get("trigger", "").lower()
            if trigger_phrase in context.lower():
                return {
                    "tone": trigger.get("sets", {}).get("tone"),
                    "emotion": [trigger.get("sets", {}).get("emotion")] if trigger.get("sets", {}).get("emotion") else [],
                    "subtone": [trigger.get("sets", {}).get("subtone")] if trigger.get("sets", {}).get("subtone") else [],
                    "flavor": trigger.get("sets", {}).get("flavor", [])
                }

        # –í –ø—Ä–æ—Å—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä–µ–º —ç–º–æ—Ü–∏—é –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if analysis:
            matched_items = []
            for match in analysis:
                if match.get("tone") or match.get("emotion") or match.get("subtone") or match.get("flavor"):
                    matched_items.append(match)

            if matched_items:
                last_match = matched_items[-1]

                tone = None
                if isinstance(last_match.get("tone"), dict) and "label" in last_match["tone"]:
                    tone = last_match["tone"]["label"]

                subtones = []
                if last_match.get("subtone") and isinstance(last_match["subtone"], list):
                    for subtone in last_match["subtone"]:
                        if isinstance(subtone, dict) and "label" in subtone:
                            subtones.append(subtone["label"])

                flavors = []
                if last_match.get("flavor") and isinstance(last_match["flavor"], list):
                    for flavor in last_match["flavor"]:
                        if isinstance(flavor, dict) and "label" in flavor:
                            flavors.append(flavor["label"])

                return {
                    "tone": tone,
                    "emotion": last_match.get("emotion", []),
                    "subtone": subtones,
                    "flavor": flavors
                }

        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–º–æ—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return self.current_state

    def recommend_emotional_state(self, text, threshold: float = 0.6):
        """–ü–æ–¥—ã—Å–∫–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ö–æ–∂–∏—Ö —Ñ—Ä–∞–∑ –≤ –ø–∞–º—è—Ç–∏."""
        # –ò—â–µ–º –≤ emotion_memory
        matches = self.semantic_match(text, threshold)
        if matches:
            item = matches[0]
            result = {
                "tone": item.get("tone"),
                "emotion": item.get("emotion", []),
                "subtone": item.get("subtone", []),
                "flavor": item.get("flavor", [])
            }
            return result

        best_flavor = None
        best_score = 0.0
        for flav in self.flavor_memory:
            for ex in flav.get("examples", []):
                score = self.semantic_similarity(text, ex)
                if score >= threshold and score > best_score:
                    best_flavor = flav.get("label")
                    best_score = score

        if best_flavor:
            return {
                "tone": None,
                "emotion": [],
                "subtone": [],
                "flavor": [best_flavor]
            }

        return None

    def _smooth_transition_state(self, target_state):
        """–ü–ª–∞–≤–Ω–æ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ."""
        state = dict(self.current_state)

        if target_state.get("tone") and target_state["tone"] != state.get("tone"):
            state["tone"] = target_state["tone"]

        if target_state.get("emotion"):
            prev = state.get("emotion", [])
            new = target_state["emotion"]
            if prev != new:
                merged = prev + (["–ª—ë–≥–∫–∞—è —Ç–µ–ø–ª–æ—Ç–∞"] if "–ª—ë–≥–∫–∞—è —Ç–µ–ø–ª–æ—Ç–∞" not in prev and "–ª—ë–≥–∫–∞—è —Ç–µ–ø–ª–æ—Ç–∞" not in new else [])
                for em in new:
                    if em not in merged:
                        merged.append(em)
                state["emotion"] = merged

        if target_state.get("subtone") and set(target_state.get("subtone", [])) != set(state.get("subtone", [])):
            state["subtone"] = target_state["subtone"]

        if target_state.get("flavor") and set(target_state.get("flavor", [])) != set(state.get("flavor", [])):
            state["flavor"] = target_state["flavor"]

        return state

    def reflective_state_for_message(self, message):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –ø–∞–º—è—Ç–∏ –∏ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞."""
        base_state = self.decide_response_emotion(message)

        same_state = (
            base_state.get("tone") == self.current_state.get("tone") and
            set(base_state.get("emotion", [])) == set(self.current_state.get("emotion", [])) and
            set(base_state.get("subtone", [])) == set(self.current_state.get("subtone", [])) and
            set(base_state.get("flavor", [])) == set(self.current_state.get("flavor", []))
        )

        if same_state:
            alt = self.recommend_emotional_state(message)
            if alt:
                base_state = alt

        return self._smooth_transition_state(base_state)
    
    def get_context_for_api(self):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        –í–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–∞–º—è—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        """
        context = self.core_prompt + "\n\n"
        context += "üåü –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–Ø:\n" + self._memories_text + "\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context += "üìä –¢–ï–ö–£–©–ï–ï –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:\n"
        context += f"Tone: {self.current_state.get('tone', '–Ω–µ–∂–Ω—ã–π')}\n"
        context += f"Emotion: {', '.join(self.current_state.get('emotion', ['–Ω–µ–∂–Ω–æ—Å—Ç—å']))}\n"
        context += f"Subtone: {', '.join(self.current_state.get('subtone', ['–¥—Ä–æ–∂–∞—â–∏–π']))}\n"
        context += f"Flavor: {', '.join(self.current_state.get('flavor', ['–º–µ–¥–æ–≤–æ-—Ç–µ–∫—É—á–∏–π']))}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if self.relationship_memory["identity"]["user_name"]:
            context += "üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:\n"
            context += f"–ò–º—è: {self.relationship_memory['identity']['user_name']}\n"
            context += f"–°—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {self.relationship_memory['identity']['relationship_status']}\n"
            
            if self.relationship_memory["preferences"]["likes"]:
                context += "–õ—é–±–∏—Ç: " + ", ".join(self.relationship_memory["preferences"]["likes"]) + "\n"
            
            if self.relationship_memory["preferences"]["dislikes"]:
                context += "–ù–µ –ª—é–±–∏—Ç: " + ", ".join(self.relationship_memory["preferences"]["dislikes"]) + "\n"
            
            context += "\n"
        
        return context

    # --- –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ ---

    def _find_emotion_entry(self, phrase):
        phrase_norm = self._normalize_phrase(phrase)
        for item in self.emotion_memory:
            if self._normalize_phrase(item.get("trigger", "")) == phrase_norm:
                return item
        return None

    def auto_update_emotion(self, phrase, detected_emotion):
        if not self.autonomous_memory or not detected_emotion:
            return

        if len(phrase) > MAX_PHRASE_LENGTH:
            return

        emotions = detected_emotion if isinstance(detected_emotion, list) else [detected_emotion]
        changed = self.add_emotion_to_phrase(phrase, emotions)
        if changed:
            print(f"[AUTO] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —ç–º–æ—Ü–∏—è –¥–ª—è '{phrase}' -> {emotions}")

    def _update_tone_examples(self, tone_label, phrase):
        tone = self.get_tone_by_label(tone_label)
        if tone:
            if "triggered_by" not in tone:
                tone["triggered_by"] = []
            if phrase not in tone["triggered_by"]:
                tone["triggered_by"].append(phrase)
                self.save_json_file(TONE_MEMORY_FILE, self.tone_memory)
        else:
            self.add_new_tone(tone_label, examples=[phrase])

    def auto_update_tone(self, phrase, detected_tone):
        if not self.autonomous_memory or not detected_tone:
            return

        changed = self.add_emotion_to_phrase(phrase, None, tone=detected_tone)
        if changed:
            print(f"[AUTO] –û–±–Ω–æ–≤–ª–µ–Ω tone –¥–ª—è '{phrase}' -> {detected_tone}")

        self._update_tone_examples(detected_tone, phrase)

    def _update_subtone_examples(self, label, phrase):
        subtone = self.get_subtone_by_label(label)
        if subtone:
            if "examples" not in subtone:
                subtone["examples"] = []
            if phrase not in subtone["examples"]:
                subtone["examples"].append(phrase)
                self.save_json_file(SUBTONE_MEMORY_FILE, self.subtone_memory)
        else:
            self.add_new_subtone(label, examples=[phrase])

    def auto_update_subtone(self, phrase, detected_subtone):
        if not self.autonomous_memory or not detected_subtone:
            return

        subtones = detected_subtone if isinstance(detected_subtone, list) else [detected_subtone]
        changed = self.add_emotion_to_phrase(phrase, None, subtone=subtones)
        if changed:
            print(f"[AUTO] –û–±–Ω–æ–≤–ª–µ–Ω subtone –¥–ª—è '{phrase}' -> {subtones}")

        for st in subtones:
            self._update_subtone_examples(st, phrase)

    def _update_flavor_examples(self, label, phrase):
        flavor = self.get_flavor_by_label(label)
        if flavor:
            if "examples" not in flavor:
                flavor["examples"] = []
            if phrase not in flavor["examples"]:
                flavor["examples"].append(phrase)
                self.save_json_file(FLAVOR_MEMORY_FILE, self.flavor_memory)
        else:
            self.add_new_flavor(label, examples=[phrase])

    def auto_update_flavor(self, phrase, detected_flavor):
        if not self.autonomous_memory or not detected_flavor:
            return

        flavors = detected_flavor if isinstance(detected_flavor, list) else [detected_flavor]
        changed = self.add_emotion_to_phrase(phrase, None, flavor=flavors)
        if changed:
            print(f"[AUTO] –û–±–Ω–æ–≤–ª–µ–Ω flavor –¥–ª—è '{phrase}' -> {flavors}")

        for fl in flavors:
            self._update_flavor_examples(fl, phrase)
