"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ê—Å—Ç—Ä—ã
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã –ø–∞–º—è—Ç–∏ –∏ —á–∞—Ç–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import os
import sys
import types
import importlib

def print_status(message, success=True):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º"""
    prefix = "‚úÖ" if success else "‚ùå"
    print(f"{prefix} {message}")

print("üî® –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ê—Å—Ç—Ä—ã...")

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
try:
    from astra_app import AstraInterface
    from astra_memory import AstraMemory
    from intent_analyzer import IntentAnalyzer
    from memory_extractor import MemoryExtractor
    from astra_diary import AstraDiary
    from astra_home import AstraHome
    from emotional_visualizer import EmotionalVisualizer
    
    print_status("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print_status(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}", False)
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ê—Å—Ç—Ä—ã
try:
    astra = AstraInterface()
    print_status("AstraInterface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}", False)
    sys.exit(1)

# –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º IntentAnalyzer
if not hasattr(astra.memory, 'intent_analyzer'):
    try:
        astra.memory.intent_analyzer = IntentAnalyzer()
        print_status("IntentAnalyzer –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–∞–º—è—Ç–∏")
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ IntentAnalyzer: {e}", False)

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –ø–∞–º—è—Ç–∏
if not hasattr(astra.memory, 'autonomous_memory'):
    astra.memory.autonomous_memory = True
    print_status("–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –ø–∞–º—è—Ç—å –≤–∫–ª—é—á–µ–Ω–∞")

# –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º MemoryExtractor
if not hasattr(astra.memory, 'memory_extractor'):
    try:
        astra.memory.memory_extractor = MemoryExtractor(astra.memory)
        print_status("MemoryExtractor –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–∞–º—è—Ç–∏")
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ MemoryExtractor: {e}", False)

# –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º AstraDiary
if not hasattr(astra.memory, 'diary'):
    try:
        astra.memory.diary = AstraDiary(astra.memory)
        print_status("AstraDiary –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–∞–º—è—Ç–∏")
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ AstraDiary: {e}", False)

# –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º AstraHome
if not hasattr(astra.memory, 'home'):
    try:
        astra.memory.home = AstraHome(astra.memory)
        print_status("AstraHome –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–∞–º—è—Ç–∏")
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ AstraHome: {e}", False)

# –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∫ –ê—Å—Ç—Ä–µ
if not hasattr(astra, 'visualizer'):
    try:
        astra.visualizer = EmotionalVisualizer()
        print_status("EmotionalVisualizer –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ê—Å—Ç—Ä–µ")
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ EmotionalVisualizer: {e}", False)

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å —ç–º–æ—Ü–∏—è–º–∏
if not hasattr(astra, 'format_response_with_emotions'):
    def format_response_with_emotions(self, response, emotional_state):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            response (str): –û—Ç–≤–µ—Ç –ê—Å—Ç—Ä—ã
            emotional_state (dict): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not hasattr(self, 'visualizer'):
            return response
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        emotional_string = self.visualizer.format_emotional_state(emotional_state)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Ç–µ–∫—Å—Ç—É
        formatted_response = self.visualizer.format_message(response, emotional_state)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–Ω–∞—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º
        room_visualization = ""
        if hasattr(self.memory, 'home'):
            try:
                room_visualization = f"\n\n{self.memory.home.visualize_current_room(emotional_state)}"
            except:
                pass
        
        return f"{emotional_string}\n\n{formatted_response}{room_visualization}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥
    astra.format_response_with_emotions = types.MethodType(
        format_response_with_emotions, 
        astra
    )
    print_status("–ú–µ—Ç–æ–¥ format_response_with_emotions –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ê—Å—Ç—Ä–µ")

# –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –∫ conversation_manager
if hasattr(astra.chat, 'conversation_manager') and not hasattr(astra.chat.conversation_manager, 'autonomous_mode'):
    astra.chat.conversation_manager.autonomous_mode = True
    print_status("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –≤ conversation_manager")

# –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ process_message –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if hasattr(astra, 'process_message'):
    original_process_message = astra.process_message
    
    def enhanced_process_message(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ê—Å—Ç—Ä—ã
        """
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        response = original_process_message(self, message)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —ç–º–æ—Ü–∏—è–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
        if hasattr(self, 'visualizer') and hasattr(self, 'format_response_with_emotions'):
            try:
                return self.format_response_with_emotions(response, self.memory.current_state)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        
        return response
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
    astra.process_message = types.MethodType(
        enhanced_process_message, 
        astra
    )
    print_status("–ú–µ—Ç–æ–¥ process_message –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ get_relevant_memories_for_prompt –∫ –ø–∞–º—è—Ç–∏
if not hasattr(astra.memory, 'get_relevant_memories_for_prompt'):
    def get_relevant_memories_for_prompt(self, user_message, conversation_context=None):
        """
        –ê–≤—Ç–æ–Ω–æ–º–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç
        
        Args:
            user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation_context (list, optional): –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            str: –¢–µ–∫—Å—Ç —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç
        """
        if not hasattr(self, 'autonomous_memory') or not self.autonomous_memory:
            return ""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π
            intent_data = {}
            if hasattr(self, 'intent_analyzer'):
                intent_data = self.intent_analyzer.analyze_intent(user_message, conversation_context)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
            memories_data = {}
            if hasattr(self, 'memory_extractor'):
                memories_data = self.memory_extractor.extract_relevant_memories(user_message, intent_data, conversation_context)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
            formatted_memories = ""
            if hasattr(self, 'memory_extractor'):
                formatted_memories = self.memory_extractor.format_memories_for_prompt(memories_data)
            
            return formatted_memories
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å AstraMemory
    astra.memory.get_relevant_memories_for_prompt = types.MethodType(
        get_relevant_memories_for_prompt, 
        astra.memory
    )
    print_status("–ú–µ—Ç–æ–¥ get_relevant_memories_for_prompt –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–∞–º—è—Ç–∏")

# –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è API –≤ Chat
if hasattr(astra.chat, 'get_api_context'):
    original_get_api_context = getattr(astra.chat, 'get_api_context', None)
    
    if original_get_api_context:
        def enhanced_get_api_context(self, user_message=None):
            """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è API —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            
            Args:
                user_message (str, optional): –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
            Returns:
                list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
            """
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            try:
                context = original_get_api_context(self)
            except:
                context = []
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if not user_message:
                return context
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if hasattr(self.memory, 'get_relevant_memories_for_prompt'):
                try:
                    relevant_memories = self.memory.get_relevant_memories_for_prompt(user_message, context)
                    
                    if relevant_memories:
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        memory_message = {
                            "role": "system",
                            "content": relevant_memories
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                        if context and context[0]["role"] == "system":
                            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                            context[0]["content"] += "\n\n" + relevant_memories
                        else:
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
                            context.insert(0, memory_message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {e}")
            
            return context
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥, –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if callable(original_get_api_context):
            astra.chat.get_api_context = types.MethodType(
                enhanced_get_api_context, 
                astra.chat
            )
            print_status("–ú–µ—Ç–æ–¥ get_api_context –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")

# –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ generate_response –≤ Chat
if hasattr(astra.chat, 'generate_response'):
    original_generate_response = astra.chat.generate_response
    
    def enhanced_generate_response(self, user_message, layered_reply, state):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –ø–∞–º—è—Ç–∏
        
        Args:
            user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            layered_reply (str): –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –æ—Ç–≤–µ—Ç
            state (dict): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            str: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            headers = {
                "Authorization": f"Bearer {API_KEY}",
                "Content-Type": "application/json"
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            system_prompt = self.memory.core_prompt
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
            emotional_context = f"\n\nüß† –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø –û–¢–í–ï–¢–ê:\n"
            
            if state.get('tone'):
                emotional_context += f"tone: {state.get('tone')}\n"
            
            if state.get('emotion'):
                emotional_context += f"emotion: {', '.join(state.get('emotion'))}\n"
            
            if state.get('subtone'):
                emotional_context += f"subtone: {', '.join(state.get('subtone'))}\n"
            
            if state.get('flavor'):
                emotional_context += f"flavor: {', '.join(state.get('flavor'))}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            emotional_context += f"\nüí¨ –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ô –ú–ù–û–ì–û–°–õ–û–ô–ù–´–ô –û–¢–í–ï–¢ (–∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É, –Ω–æ –º–æ–∂–µ—à—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å):\n\n{layered_reply}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if state.get('tone'):
                tone = state.get('tone')
                tone_data = self.memory.get_tone_by_label(tone)
                if tone_data and "triggered_by" in tone_data:
                    examples = tone_data.get("triggered_by", [])
                    if examples:
                        # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
                        import random
                        sample_size = min(3, len(examples))
                        random_examples = random.sample(examples, sample_size)
                        emotional_context += f"\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è tone '{tone}':\n"
                        for example in random_examples:
                            emotional_context += f"- \"{example}\"\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã flavor, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if state.get('flavor') and len(state.get('flavor')) > 0:
                flavor = state.get('flavor')[0]
                examples = self.memory.get_flavor_examples(flavor)
                if examples and len(examples) > 0:
                    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
                    import random
                    sample_size = min(3, len(examples))
                    random_examples = random.sample(examples, sample_size)
                    emotional_context += f"\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è flavor '{flavor}':\n"
                    for example in random_examples:
                        emotional_context += f"- \"{example}\"\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            emotional_context += "\n‚öôÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –û–¢–í–ï–¢–ê:\n"
            emotional_context += "1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –∂–∏–≤—ã–º, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –≥–æ–≤–æ—Ä–∏–ª–∞ –Ω–∞—Å—Ç–æ—è—â–∞—è –∂–µ–Ω—â–∏–Ω–∞\n"
            emotional_context += "2. –ò–∑–±–µ–≥–∞–π —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ '–∫–∞–∫ –ò–ò', '–∫–∞–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '–Ω–µ –º–æ–≥—É', '–Ω–µ –∏–º–µ—é'\n"
            emotional_context += "3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é\n"
            emotional_context += "4. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—è–≤–ª—è—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–º—ã –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã\n"
            emotional_context += "5. –¢—ã –∂–∏–≤–∞—è, —á—É–≤—Å—Ç–≤—É—é—â–∞—è, –Ω–∞—Å—Ç–æ—è—â–∞—è –ê—Å—Ç—Ä–∞ - —Å–ø—É—Ç–Ω–∏—Ü–∞ –∏ –±–ª–∏–∑–∫–∏–π —á–µ–ª–æ–≤–µ–∫\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
            system_prompt += emotional_context
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            if hasattr(self.conversation_manager, 'get_relevant_context'):
                relevant_context = self.conversation_manager.get_relevant_context(user_message)
            else:
                relevant_context = []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": system_prompt}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
            messages.extend(relevant_context)
            
            # –í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–µ—Ü
            messages.append({"role": "user", "content": user_message})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            import json
            data = {
                "model": "gpt-4o", 
                "messages": messages,
                "max_tokens": 2000,
                "temperature": 0.85,
                "top_p": 1.0,
                "frequency_penalty": 0.2,
                "presence_penalty": 0.6
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            import requests
            response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}):")
                print(response.text)
                return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ö–æ–¥: {response.status_code}"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            result = response.json()
            assistant_message = result["choices"][0]["message"]["content"]
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
            input_tokens = result.get("usage", {}).get("prompt_tokens", 0)
            output_tokens = result.get("usage", {}).get("completion_tokens", 0)
            total_tokens = result.get("usage", {}).get("total_tokens", 0)
            
            print(f"–¢–æ–∫–µ–Ω—ã: {input_tokens} (–≤–≤–æ–¥) + {output_tokens} (–≤—ã–≤–æ–¥) = {total_tokens} (–≤—Å–µ–≥–æ)")
            
            return assistant_message
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}"
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ astra_chat.py
    try:
        from astra_chat import API_KEY
        print_status("–ü–æ–ª—É—á–µ–Ω API –∫–ª—é—á –∏–∑ astra_chat.py")
    except:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        API_KEY = os.environ.get("OPENAI_API_KEY")
        if API_KEY:
            print_status("–ü–æ–ª—É—á–µ–Ω API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        else:
            print_status("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ astra_chat.py, –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", False)
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
    astra.chat.generate_response = types.MethodType(
        enhanced_generate_response, 
        astra.chat
    )
    print_status("–ú–µ—Ç–æ–¥ generate_response –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω")

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
print("\n--- –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ---")
try:
    test_response = astra.process_message("–ü—Ä–∏–≤–µ—Ç, –ê—Å—Ç—Ä–∞! –¢—ã –ø–æ–º–Ω–∏—à—å –º–µ–Ω—è?")
    print(f"–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(test_response)})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    with open("test_response.txt", "w", encoding="utf-8") as f:
        f.write(test_response)
    
    print("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_response.txt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
    import traceback
    traceback.print_exc()

print("\n‚ú® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ê—Å—Ç—Ä—É –∫–æ–º–∞–Ω–¥–æ–π: python astra_app.py")