"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT –≤ –ê—Å—Ç—Ä–µ
"""
import os
import sys
from load_env import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_dual_model_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT –≤ –ê—Å—Ç—Ä–µ"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from astra_app import AstraInterface
        from intent_analyzer import IntentAnalyzer
        from memory_extractor import MemoryExtractor
        from dual_model_integrator import DualModelIntegrator
        
        print("‚úÖ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å OPENAI_API_KEY=your_key –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:5]}...{api_key[-4:]}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ê—Å—Ç—Ä—ã
        print("\n--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---")
        astra = AstraInterface()
        print("‚úÖ AstraInterface —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        intent_analyzer = IntentAnalyzer(api_key)
        print("‚úÖ IntentAnalyzer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        memory_extractor = MemoryExtractor(astra.memory, api_key)
        print("‚úÖ MemoryExtractor —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        dual_model_integrator = DualModelIntegrator(
            astra.memory,
            intent_analyzer,
            memory_extractor,
            api_key
        )
        print("‚úÖ DualModelIntegrator —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π ---")
        test_message = "–ü—Ä–∏–≤–µ—Ç, –ê—Å—Ç—Ä–∞! –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?"
        print(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{test_message}'")
        
        intent_result = intent_analyzer.analyze_intent(test_message)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  Intent: {intent_result.get('intent', 'unknown')}")
        if 'emotional_context' in intent_result:
            emotional_context = intent_result['emotional_context']
            print(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–æ–Ω: {emotional_context.get('tone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —ç–º–æ—Ü–∏–∏: {', '.join(emotional_context.get('emotions', []))}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è
        print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è ---")
        style_result = intent_analyzer.analyze_user_style(test_message)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        if 'error' not in style_result:
            print(f"  –î–ª–∏–Ω–∞: {style_result.get('length', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"  –§–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å: {style_result.get('formality', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"  –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {style_result.get('emotionality', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            if 'mirror_suggestions' in style_result:
                mirror = style_result['mirror_suggestions']
                print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–Ω–∏—é: {mirror}")
        else:
            print(f"  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è: {style_result.get('error')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---")
        try:
            result = dual_model_integrator.generate_integrated_response(test_message)
            response = result["response"]
            print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(response)}):")
            print(f"  –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {response[:100]}...")
            print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {result['memory_used']}")
            print(f"  –û—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è: {result['style_mirroring']}")
            print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time']:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª
            with open("test_integrated_response.txt", "w", encoding="utf-8") as f:
                f.write(response)
            print("  –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_integrated_response.txt")
            
            # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            show_full = input("\n–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç? (y/n): ").lower() == 'y'
            if show_full:
                print("\n--- –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç ---")
                print(response)
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT...")
    test_dual_model_integration()