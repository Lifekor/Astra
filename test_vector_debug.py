#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏
"""

print("üîç –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏...")

try:
    from astra_mcp_memory import AstraMCPMemory

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    mcp = AstraMCPMemory()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {mcp.get_stats()}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print(f"üß† Embeddings: {mcp.embeddings is not None}")
    print(f"üìö Index: {mcp.index is not None}")

    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    if mcp.embeddings and mcp.index:
        print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫...")
        results = mcp.semantic_search("—Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–∏–∫–∞", top_k=5, min_score=0.1)
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        for i, result in enumerate(results, 1):
            print(f"\n{i}. Score: {result.get('score', 0):.3f}")
            print(f"   Source: {result.get('source', 'unknown')}")
            text = result.get("text", "")
            print(f"   Text: {text[:150]}...")
    else:
        print("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
except Exception as e:
    print(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")

print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
try:
    import faiss

    print("‚úÖ FAISS –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    print("‚ùå FAISS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

try:
    from sentence_transformers import SentenceTransformer

    print("‚úÖ SentenceTransformers –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    print("‚ùå SentenceTransformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

try:
    import numpy as np

    print("‚úÖ NumPy –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    print("‚ùå NumPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
