
# –ü–∞—Ç—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT –≤ –ê—Å—Ç—Ä–µ
import types
import os

def init_dual_model_integrator(self, memory, intent_analyzer, memory_extractor):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π
    
    Args:
        memory (AstraMemory): –û–±—ä–µ–∫—Ç –ø–∞–º—è—Ç–∏ –ê—Å—Ç—Ä—ã
        intent_analyzer (IntentAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        memory_extractor (MemoryExtractor): –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    """
    from dual_model_integrator import DualModelIntegrator
    self.dual_model_integrator = DualModelIntegrator(
        memory,
        intent_analyzer,
        memory_extractor,
        os.environ.get("OPENAI_API_KEY")
    )
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def enhanced_send_message(self, user_message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
    
    Args:
        user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –û—Ç–≤–µ—Ç –ê—Å—Ç—Ä—ã
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.add_message_to_history("user", user_message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        state = self.process_user_message(user_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        conversation_context = self.conversation_manager.get_api_context() if hasattr(self.conversation_manager, 'get_api_context') else None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
        result = self.dual_model_integrator.generate_integrated_response(
            user_message,
            conversation_context,
            state
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        final_response = result["response"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if "emotional_state" in result:
            self.memory.save_current_state(result["emotional_state"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.add_message_to_history("assistant", final_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –¥–∏—Å–∫
        if hasattr(self.conversation_manager, 'save_history_to_disk'):
            self.conversation_manager.save_history_to_disk()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç
        if hasattr(self.memory, 'diary') and self.memory.diary:
            conversation_data = {
                "user_message": user_message,
                "response": final_response,
                "emotional_state": result.get("emotional_state", {})
            }
            
            should_remember, diary_type, reason = self.memory.diary.should_remember(conversation_data)
            if should_remember:
                self.memory.diary.add_diary_entry(
                    diary_type,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n\n–ê—Å—Ç—Ä–∞: {final_response}",
                    ["–¥–∏–∞–ª–æ–≥", diary_type]
                )
                print(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫ {diary_type}: {reason}")
        
        return final_response
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return "–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

def patch_astra_chat():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ç—á –∫ AstraChat"""
    from astra_app import AstraInterface
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ê—Å—Ç—Ä—ã
    astra = AstraInterface()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    from intent_analyzer import IntentAnalyzer
    from memory_extractor import MemoryExtractor
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    intent_analyzer = IntentAnalyzer(os.environ.get("OPENAI_API_KEY"))
    memory_extractor = MemoryExtractor(astra.memory, os.environ.get("OPENAI_API_KEY"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ AstraChat
    astra.chat.init_dual_model_integrator = types.MethodType(init_dual_model_integrator, astra.chat)
    astra.chat.send_message = types.MethodType(enhanced_send_message, astra.chat)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π
    astra.chat.init_dual_model_integrator(astra.memory, intent_analyzer, memory_extractor)
    
    print("‚úÖ –ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ AstraChat")
    return astra
