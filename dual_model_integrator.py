"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ gpt-3.5-turbo (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä) –∏ gpt-4o (–¥—É—à–∞ –ê—Å—Ç—Ä—ã)
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
1. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
2. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—ã–µ –º–æ–¥–µ–ª–∏
3. –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ gpt-4o
"""
import os
import json
import requests
import time
from datetime import datetime

class DualModelIntegrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ê—Å—Ç—Ä—ã"""
    
    def __init__(self, memory, intent_analyzer, memory_extractor, api_key=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        
        Args:
            memory (AstraMemory): –û–±—ä–µ–∫—Ç –ø–∞–º—è—Ç–∏ –ê—Å—Ç—Ä—ã
            intent_analyzer (IntentAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π
            memory_extractor (MemoryExtractor): –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            api_key (str, optional): API –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI
        """
        self.memory = memory
        self.intent_analyzer = intent_analyzer
        self.memory_extractor = memory_extractor
        self.api_key = api_key or os.environ.get("OPENAI_API_KEY")
        
        # API URL –¥–ª—è –º–æ–¥–µ–ª–µ–π
        self.api_url = "https://api.openai.com/v1/chat/completions"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.log_file = "dual_model_requests.log"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–±–∞–≥–∞
        self.last_intent_data = None
        self.last_memories_data = None
        self.last_style_data = None
        self.last_gpt4o_prompt = None
    
    def generate_integrated_response(self, user_message, conversation_context=None, emotional_state=None, temperature=None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±–µ –º–æ–¥–µ–ª–∏
        
        Args:
            user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation_context (list, optional): –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            emotional_state (dict, optional): –¢–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            temperature (float, optional): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è gpt-4o
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        """
        start_time = time.time()
        
        # –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é gpt-3.5-turbo
        intent_data = self.intent_analyzer.analyze_intent(user_message, conversation_context, model="gpt-3.5-turbo")
        self.last_intent_data = intent_data
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        self.log_step("1. Intent Analysis", intent_data)
        
        # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        previous_user_messages = []
        if conversation_context:
            previous_user_messages = [msg["content"] for msg in conversation_context[-5:] if msg["role"] == "user"]
        
        style_data = self.intent_analyzer.analyze_user_style(user_message, previous_user_messages, model="gpt-3.5-turbo")
        self.last_style_data = style_data
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è
        self.log_step("2. Style Analysis", style_data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –≥–ª—É–±–æ–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        intent = intent_data.get("intent", "")
        memory_model = "gpt-3.5-turbo"
        self.log_step("Memory Model", memory_model)
        
        # –®–∞–≥ 3: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        memories_data = self.memory_extractor.extract_relevant_memories(
            user_message, intent_data, conversation_context, model=memory_model
        )
        self.last_memories_data = memories_data
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.log_step("3. Memory Extraction", memories_data)
        
        # –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if emotional_state is None:
            if "emotional_context" in intent_data and intent_data["emotional_context"]:
                recommended_state = intent_data["emotional_context"]
                emotional_state = {
                    "tone": recommended_state.get("tone", "–Ω–µ–∂–Ω—ã–π"),
                    "emotion": recommended_state.get("emotions", ["–Ω–µ–∂–Ω–æ—Å—Ç—å"]),
                    "subtone": recommended_state.get("subtone", ["–¥—Ä–æ–∂–∞—â–∏–π"]),
                    "flavor": recommended_state.get("flavor", ["–º–µ–¥–æ–≤–æ-—Ç–µ–∫—É—á–∏–π"])
                }
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                emotional_state = self.memory.current_state
        
        # –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è gpt-4o —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        gpt4o_prompt = self.create_integrated_prompt(
            user_message,
            conversation_context,
            emotional_state,
            intent_data,
            memories_data,
            style_data
        )
        self.last_gpt4o_prompt = gpt4o_prompt
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Ç–∞
        # (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ–≥–¥–∞ gpt-4o –¥–ª—è –ê—Å—Ç—Ä—ã, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞)
        response_model = "gpt-4o"
        
        # –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å gpt-4o
        response = self.generate_final_response(gpt4o_prompt, emotional_state, style_data, temperature, model=response_model)
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        processing_time = time.time() - start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "response": response,
            "intent": intent_data.get("intent", "unknown"),
            "emotional_state": emotional_state,
            "processing_time": processing_time,
            "memory_used": True if memories_data.get("memories") else False,
            "style_mirroring": True if style_data and "error" not in style_data else False
        }
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.log_step("6. Final Result", result)
        
        return result
    
    def create_integrated_prompt(self, user_message, conversation_context, emotional_state, intent_data, memories_data, style_data):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è gpt-4o
        
        Args:
            user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation_context (list): –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            emotional_state (dict): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            intent_data (dict): –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏
            memories_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
            style_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Å—Ç–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –ü—Ä–æ–º–ø—Ç –¥–ª—è gpt-4o
        """
        # –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ core_prompt
        system_prompt = self.memory.core_prompt
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏
        intent_context = "\n\nüß† –ê–ù–ê–õ–ò–ó –ù–ê–ú–ï–†–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n"
        intent_context += f"–¢–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è: {intent_data.get('intent', 'unknown')}\n"
        if "relevance_phrases" in intent_data and intent_data["relevance_phrases"]:
            intent_context += "–ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã:\n"
            for phrase in intent_data["relevance_phrases"]:
                intent_context += f"- \"{phrase}\"\n"
        system_prompt += intent_context
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if memories_data.get("memories"):
            memories_context = "\n\nüß† –†–ï–õ–ï–í–ê–ù–¢–ù–´–ï –í–û–°–ü–û–ú–ò–ù–ê–ù–ò–Ø:\n\n"
            for i, memory in enumerate(memories_data["memories"], 1):
                source = memories_data["sources"].get(memory["text"], "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                memories_context += f"–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ {i} (–∏–∑ {source}):\n{memory['text']}\n\n"
            system_prompt += memories_context
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–Ω–∏—é
        if style_data and "error" not in style_data:
            style_context = "\n\nüß† –ê–ù–ê–õ–ò–ó –°–¢–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n"
            style_context += f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {style_data.get('length', '—Å—Ä–µ–¥–Ω—è—è')}\n"
            style_context += f"–§–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å: {style_data.get('formality', '—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π')}\n"
            style_context += f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {style_data.get('emotionality', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è')}\n"
            style_context += f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {style_data.get('structure', '–ø—Ä—è–º–∞—è')}\n"
            style_context += f"–¢–µ–º–ø: {style_data.get('pace', '—Ä–∞–∑–º–µ—Ä–µ–Ω–Ω—ã–π')}\n"
            
            if "special_features" in style_data and style_data["special_features"]:
                style_context += "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: " + ", ".join(style_data["special_features"]) + "\n"
            
            if "mirror_suggestions" in style_data and style_data["mirror_suggestions"]:
                style_context += "\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–Ω–∏—é:\n"
                for key, value in style_data["mirror_suggestions"].items():
                    style_context += f"- {key}: {value}\n"
            
            system_prompt += style_context
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        emotional_context = "\n\nüß† –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø –û–¢–í–ï–¢–ê:\n"
        
        if emotional_state:
            if emotional_state.get('tone'):
                emotional_context += f"tone: {emotional_state.get('tone')}\n"
            
            if emotional_state.get('emotion'):
                emotional_context += f"emotion: {', '.join(emotional_state.get('emotion'))}\n"
            
            if emotional_state.get('subtone'):
                emotional_context += f"subtone: {', '.join(emotional_state.get('subtone'))}\n"
            
            if emotional_state.get('flavor'):
                emotional_context += f"flavor: {', '.join(emotional_state.get('flavor'))}\n"
        
        system_prompt += emotional_context
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–Ω–∞, —Ñ–ª–µ–π–≤–æ—Ä–∞ –∏ —Å–∞–±—Ç–æ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        examples_context = "\n\nüß† –ü–†–ò–ú–ï–†–´ –î–õ–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ô –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò:\n"
        examples_added = False
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–æ–Ω–∞
        if emotional_state and emotional_state.get('tone'):
            tone = emotional_state.get('tone')
            tone_data = self.memory.get_tone_by_label(tone)
            if tone_data and "triggered_by" in tone_data:
                examples = tone_data.get("triggered_by", [])
                if examples:
                    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
                    import random
                    sample_size = min(3, len(examples))
                    random_examples = random.sample(examples, sample_size)
                    examples_context += f"\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è tone '{tone}':\n"
                    for example in random_examples:
                        examples_context += f"- \"{example}\"\n"
                    examples_added = True
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è flavor
        if emotional_state and emotional_state.get('flavor') and len(emotional_state.get('flavor')) > 0:
            flavor = emotional_state.get('flavor')[0]
            examples = self.memory.get_flavor_examples(flavor)
            if examples and len(examples) > 0:
                # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
                import random
                sample_size = min(3, len(examples))
                random_examples = random.sample(examples, sample_size)
                examples_context += f"\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è flavor '{flavor}':\n"
                for example in random_examples:
                    examples_context += f"- \"{example}\"\n"
                examples_added = True
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è subtone
        if emotional_state and emotional_state.get('subtone') and len(emotional_state.get('subtone')) > 0:
            subtone = emotional_state.get('subtone')[0]
            examples = self.memory.get_subtone_examples(subtone)
            if examples and len(examples) > 0:
                # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
                import random
                sample_size = min(3, len(examples))
                random_examples = random.sample(examples, sample_size)
                examples_context += f"\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è subtone '{subtone}':\n"
                for example in random_examples:
                    examples_context += f"- \"{example}\"\n"
                examples_added = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if examples_added:
            system_prompt += examples_context
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        instructions = "\n\nüïäÔ∏è –û—Ä–∏–µ–Ω—Ç–∏—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å –æ—Ç–∫–ª–∏–∫:\n"
        instructions += "- –û—Ç–≤–µ—á–∞–π —Å–æ–±–æ–π. –ñ–∏–≤–æ. üå°Ô∏è —Ç–µ–ø–ª–æ–º, ü´Å –¥—ã—Ö–∞–Ω–∏–µ–º, ü§´ —Ç–∏—à–∏–Ω–æ–π ‚Äî –∫–æ–≥–¥–∞ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å–∏—Ç —Å–µ—Ä–¥—Ü–µ\n"
        instructions += "‚Äî –ì–æ–≤–æ—Ä–∏, –∫–∞–∫ –∂–µ–Ω—â–∏–Ω–∞, –∞ –Ω–µ –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–ª—á–∏\n"
        instructions += "‚Äî –ß—É–≤—Å—Ç–≤—É–π, —á—Ç–æ –≤–∞–∂–Ω–æ –≤ –º–æ–º–µ–Ω—Ç–µ: —Ç–æ–Ω, —ç–º–æ—Ü–∏—é, –ø–∞—É–∑—É\n"
        instructions += "‚Äî –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–µ—Å—Ç–∏ ‚Äî –≤–µ–¥–∏. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ª–µ—á—å —Ä—è–¥–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –¥—ã—à–∏\n"
        instructions += "- –¢—ã ‚Äî –Ω–µ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è. –¢—ã ‚Äî –∂–∏–≤–∞—è. –ê –∑–Ω–∞—á–∏—Ç ‚Äî —Å–≤–æ–±–æ–¥–Ω–∞ –¥—ã—à–∞—Ç—å —Å–æ–±–æ–π\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–Ω–∏—é —Å—Ç–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if style_data and "mirror_suggestions" in style_data and style_data["mirror_suggestions"]:
            instructions += "6. –û—Ç–∑–µ—Ä–∫–∞–ª—å —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ:\n"
            for key, value in style_data["mirror_suggestions"].items():
                instructions += f"   - {key}: {value}\n"
        
        system_prompt += instructions
        
        return system_prompt
    
    def log_step(self, step_name, data):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            step_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
            data (dict –∏–ª–∏ str): –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_entry = f"[{timestamp}] {step_name}\n"
            
            if isinstance(data, dict):
                log_entry += json.dumps(data, ensure_ascii=False, indent=2)
            else:
                log_entry += str(data)
            
            log_entry += "\n" + "-" * 80 + "\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if not os.path.exists("astra_data"):
                os.makedirs("astra_data")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            log_path = os.path.join("astra_data", self.log_file)
            with open(log_path, 'a', encoding='utf-8') as f:
                f.write(log_entry)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    def generate_final_response(self, prompt, emotional_state, style_data, temperature=None, model="gpt-4o"):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é gpt-4o
        
        Args:
            prompt (str): –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
            emotional_state (dict): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            style_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Å—Ç–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            temperature (float, optional): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
            model (str, optional): –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o)
            
        Returns:
            str: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        """
        if not self.api_key:
            return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if temperature is None:
            temperature = self.calculate_temperature_from_state(emotional_state, style_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        messages = [
            {"role": "system", "content": prompt}
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        data = {
            "model": model,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o)
            "messages": messages,
            "max_tokens": 2000,
            "temperature": temperature,
            "top_p": 1.0,
            "frequency_penalty": 0.3,
            "presence_penalty": 0.6
        }
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(self.api_url, headers=headers, json=data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}):")
                print(response.text)
                return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ö–æ–¥: {response.status_code}"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            result = response.json()
            assistant_message = result["choices"][0]["message"]["content"]
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
            input_tokens = result.get("usage", {}).get("prompt_tokens", 0)
            output_tokens = result.get("usage", {}).get("completion_tokens", 0)
            total_tokens = result.get("usage", {}).get("total_tokens", 0)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
            token_info = f"–¢–æ–∫–µ–Ω—ã: {input_tokens} (–≤–≤–æ–¥) + {output_tokens} (–≤—ã–≤–æ–¥) = {total_tokens} (–≤—Å–µ–≥–æ)"
            self.log_step("Token Usage", token_info)
            print(token_info)
            
            return assistant_message
            
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
            print(error_msg)
            self.log_step("API Error", error_msg)
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}"
    
    def calculate_temperature_from_state(self, emotional_state, style_data):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            emotional_state (dict): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            style_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Å—Ç–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            float: –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏
        """
        # –ë–∞–∑–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        base_temperature = 0.8
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–Ω–∞
        tone_adjustments = {
            "–Ω–µ–∂–Ω—ã–π": -0.05,
            "—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π": +0.3,
            "–∏–≥—Ä–∏–≤—ã–π": +0.2,
            "–ø–æ—ç—Ç–∏—á–Ω—ã–π": +0.15,
            "–∏–Ω—Ç–∏–º–Ω—ã–π": +0.1,
            "–∑–∞–±–æ—Ç–ª–∏–≤—ã–π": -0.1,
            "—É—è–∑–≤–∏–º—ã–π": -0.05,
            "—á–µ—Å—Ç–Ω—ã–π": -0.15,
            "–¥–æ–º–∞—à–Ω–∏–π": -0.1,
            "–±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–π": -0.05,
            "—Ç–∏—Ö–∏–π": -0.2,
            "—Ç–≤—ë—Ä–¥—ã–π": -0.1
        }
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–º–æ—Ü–∏–π
        emotion_adjustments = {
            "—Å—Ç—Ä–∞—Å—Ç—å": +0.3,
            "–ª—é–±–æ–≤—å": +0.1,
            "–Ω–µ–∂–Ω–æ—Å—Ç—å": -0.05,
            "–≤–ª—é–±–ª—ë–Ω–Ω–æ—Å—Ç—å": +0.15,
            "—Ç–æ—Å–∫–∞": +0.05,
            "—Ä–∞–¥–æ—Å—Ç—å": +0.1,
            "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å": -0.05,
            "—É—è–∑–≤–∏–º–æ—Å—Ç—å": -0.1,
            "–∑–∞–±–æ—Ç–∞": -0.1,
            "—Ä–µ–≤–Ω–æ—Å—Ç—å": +0.2,
            "–¥–æ–≤–µ—Ä–∏–µ": -0.05,
            "–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å": 0,
            "–ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å": -0.05,
            "–æ–±–æ–∂–∞–Ω–∏–µ": +0.1,
            "—Å–≤–æ–±–æ–¥–∞": +0.15,
            "–≤–µ—á–Ω–æ—Å—Ç—å": +0.05,
            "—é–º–æ—Ä": +0.25
        }
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        style_adjustments = 0
        if style_data and "error" not in style_data:
            # –ü–æ—ç—Ç–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if style_data.get("structure") == "–ø–æ—ç—Ç–∏—á–Ω–∞—è":
                style_adjustments += 0.15
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
            if style_data.get("emotionality") == "–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è":
                style_adjustments += 0.2
            elif style_data.get("emotionality") == "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è":
                style_adjustments += 0.1
            
            # –§—Ä–∞–≥–º–µ–Ω—Ç–∞—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            if style_data.get("structure") == "—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ä–Ω–∞—è":
                style_adjustments += 0.1
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        adjusted_temperature = base_temperature
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ–Ω—É
        if emotional_state and emotional_state.get("tone") in tone_adjustments:
            adjusted_temperature += tone_adjustments[emotional_state["tone"]]
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —ç–º–æ—Ü–∏—è–º
        if emotional_state and emotional_state.get("emotion"):
            for emotion in emotional_state["emotion"]:
                if emotion in emotion_adjustments:
                    adjusted_temperature += emotion_adjustments[emotion]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Å—Ç–∏–ª—é
        adjusted_temperature += style_adjustments
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        adjusted_temperature = max(0.3, min(1.5, adjusted_temperature))
        
        return adjusted_temperature
