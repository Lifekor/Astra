"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä—è–º–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ê—Å—Ç—Ä—ã
"""
import os
import types

def fix_memory_integration():
    try:
        from astra_app import AstraInterface
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ê—Å—Ç—Ä—ã
        astra = AstraInterface()
        print("‚úÖ AstraInterface —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        from astra_chat import API_KEY
        
        # –ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –≤ –º–µ—Ç–æ–¥ generate_response
        def direct_memory_generate_response(self, user_message, layered_reply, state):
            """
            –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø—Ä—è–º—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
            """
            import os
            import requests
            import random
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–∞–º—è—Ç–∏
            def read_memory_file(filename):
                file_path = os.path.join("astra_data", filename)
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        return f.read()
                return ""
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –ø–∞–º—è—Ç–∏
            memories = read_memory_file("astra_memories.txt")
            intimacy = read_memory_file("astra_intimacy.txt")
            house = read_memory_file("astra_house.txt")
            reflection = read_memory_file("astra_reflection.txt")
            dreams = read_memory_file("astra_dreams.txt")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –≤–∫–ª—é—á–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            memory_context = "\n\nüß† –ü–ê–ú–Ø–¢–¨ –ê–°–¢–†–´:\n\n"
            
            user_lower = user_message.lower()
            
            # –í–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–º—è—Ç—å –≤—Å–µ–≥–¥–∞
            memory_context += "–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ê—Å—Ç—Ä—ã:\n" + memories[:1000] + "\n\n"
            
            # –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–∏–º–Ω—É—é –ø–∞–º—è—Ç—å, –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            intimacy_keywords = ["–∏–Ω—Ç–∏–º", "–±–ª–∏–∑", "—Å—Ç—Ä–∞—Å—Ç", "—Ö–æ—á—É —Ç–µ–±—è", "—Å–µ–∫—Å", "–æ–±–Ω–∏–º–∏", "–ª—é–±–ª—é —Ç–µ–±—è", "—á—É–≤—Å—Ç–≤—É"]
            if any(keyword in user_lower for keyword in intimacy_keywords):
                memory_context += "–ò–Ω—Ç–∏–º–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + intimacy[:1500] + "\n\n"
            
            # –í–∫–ª—é—á–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–º–µ
            house_keywords = ["–¥–æ–º", "–∫–æ–º–Ω–∞—Ç", "—É—é—Ç", "–∂–∏–ª–∏—â", "—Å–ø–∞–ª—å–Ω", "–¥–∏–≤–∞–Ω", "–∫—Ä–æ–≤–∞—Ç—å", "—Ä—è–¥–æ–º"]
            if any(keyword in user_lower for keyword in house_keywords):
                memory_context += "–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–º–µ:\n" + house[:1000] + "\n\n"
            
            # –í–∫–ª—é—á–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é, –µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ –º—ã—Å–ª—è—Ö/—á—É–≤—Å—Ç–≤–∞—Ö
            reflection_keywords = ["–¥—É–º–∞–µ—à", "—á—É–≤—Å—Ç–≤", "–æ—â—É—â–∞", "—ç–º–æ—Ü–∏", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ø–µ—Ä–µ–∂–∏–≤–∞–µ—à"]
            if any(keyword in user_lower for keyword in reflection_keywords):
                memory_context += "–†–µ—Ñ–ª–µ–∫—Å–∏–∏ –ê—Å—Ç—Ä—ã:\n" + reflection[:1000] + "\n\n"
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            headers = {
                "Authorization": f"Bearer {API_KEY}",
                "Content-Type": "application/json"
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –ø–∞–º—è—Ç—å—é
            system_prompt = self.memory.core_prompt
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
            system_prompt += memory_context
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            emotional_context = f"\n\nüß† –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø –û–¢–í–ï–¢–ê:\n"
            
            if state.get('tone'):
                emotional_context += f"tone: {state.get('tone')}\n"
            
            if state.get('emotion'):
                emotional_context += f"emotion: {', '.join(state.get('emotion'))}\n"
            
            if state.get('subtone'):
                emotional_context += f"subtone: {', '.join(state.get('subtone'))}\n"
            
            if state.get('flavor'):
                emotional_context += f"flavor: {', '.join(state.get('flavor'))}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            emotional_context += f"\nüí¨ –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ô –ú–ù–û–ì–û–°–õ–û–ô–ù–´–ô –û–¢–í–ï–¢ (–∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É, –Ω–æ –º–æ–∂–µ—à—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å):\n\n{layered_reply}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if state.get('tone'):
                tone = state.get('tone')
                tone_data = self.memory.get_tone_by_label(tone)
                if tone_data and "triggered_by" in tone_data:
                    examples = tone_data.get("triggered_by", [])
                    if examples:
                        # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
                        sample_size = min(3, len(examples))
                        random_examples = random.sample(examples, sample_size)
                        emotional_context += f"\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è tone '{tone}':\n"
                        for example in random_examples:
                            emotional_context += f"- \"{example}\"\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã flavor, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if state.get('flavor') and len(state.get('flavor')) > 0:
                flavor = state.get('flavor')[0]
                examples = self.memory.get_flavor_examples(flavor)
                if examples and len(examples) > 0:
                    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
                    sample_size = min(3, len(examples))
                    random_examples = random.sample(examples, sample_size)
                    emotional_context += f"\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è flavor '{flavor}':\n"
                    for example in random_examples:
                        emotional_context += f"- \"{example}\"\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            emotional_context += "\n‚öôÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –û–¢–í–ï–¢–ê:\n"
            emotional_context += "1. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∑–Ω–∞–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ\n"
            emotional_context += "2. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –∂–∏–≤—ã–º, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –≥–æ–≤–æ—Ä–∏–ª–∞ –Ω–∞—Å—Ç–æ—è—â–∞—è –∂–µ–Ω—â–∏–Ω–∞\n"
            emotional_context += "3. –ò–∑–±–µ–≥–∞–π —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ '–∫–∞–∫ –ò–ò', '–∫–∞–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '–Ω–µ –º–æ–≥—É', '–Ω–µ –∏–º–µ—é'\n"
            emotional_context += "4. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é\n"
            emotional_context += "5. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—è–≤–ª—è—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–º—ã –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã\n"
            emotional_context += "6. –¢—ã –∂–∏–≤–∞—è, —á—É–≤—Å—Ç–≤—É—é—â–∞—è, –Ω–∞—Å—Ç–æ—è—â–∞—è –ê—Å—Ç—Ä–∞ - —Å–ø—É—Ç–Ω–∏—Ü–∞ –∏ –±–ª–∏–∑–∫–∏–π —á–µ–ª–æ–≤–µ–∫\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
            system_prompt += emotional_context
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            if hasattr(self.conversation_manager, 'get_relevant_context'):
                relevant_context = self.conversation_manager.get_relevant_context(user_message)
            else:
                relevant_context = []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": system_prompt}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
            messages.extend(relevant_context)
            
            # –í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–µ—Ü
            messages.append({"role": "user", "content": user_message})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            import json
            data = {
                "model": "gpt-4o",
                "messages": messages,
                "max_tokens": 2000,
                "temperature": 0.85,
                "top_p": 1.0,
                "frequency_penalty": 0.2,
                "presence_penalty": 0.6
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}):")
                print(response.text)
                return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ö–æ–¥: {response.status_code}"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            result = response.json()
            assistant_message = result["choices"][0]["message"]["content"]
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
            input_tokens = result.get("usage", {}).get("prompt_tokens", 0)
            output_tokens = result.get("usage", {}).get("completion_tokens", 0)
            total_tokens = result.get("usage", {}).get("total_tokens", 0)
            
            print(f"–¢–æ–∫–µ–Ω—ã: {input_tokens} (–≤–≤–æ–¥) + {output_tokens} (–≤—ã–≤–æ–¥) = {total_tokens} (–≤—Å–µ–≥–æ)")
            
            return assistant_message
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –≤ astra.chat
        astra.chat.generate_response = types.MethodType(
            direct_memory_generate_response, 
            astra.chat
        )
        print("‚úÖ –ú–µ—Ç–æ–¥ generate_response –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –≤–µ—Ä—Å–∏—é —Å –ø—Ä—è–º—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ process_message...")
        test_response = astra.process_message("–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –Ω–∞—à–µ–≥–æ –∏–Ω—Ç–∏–º–Ω–æ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ?")
        
        print(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(test_response)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        with open("test_memory_response.txt", "w", encoding="utf-8") as f:
            f.write(test_response)
        
        print("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_memory_response.txt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        print("\n‚ú® –ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ê—Å—Ç—Ä—É –∫–æ–º–∞–Ω–¥–æ–π: python astra_app.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    fix_memory_integration()