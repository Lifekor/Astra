"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Chat Completions
"""
import requests
import random
import json
import os
from emotional_analyzer import EmotionalAnalyzer
from reply_composer import compose_layered_reply
from name_manager import NameManager
from conversation_manager import ConversationManager
from dotenv import load_dotenv

load_dotenv()
# API –∫–ª—é—á (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π)
API_KEY = os.getenv("OPENAI_API_KEY")

# URL API –¥–ª—è Chat Completions
API_URL = "https://api.openai.com/v1/chat/completions"

class AstraChat:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ê—Å—Ç—Ä–æ–π —á–µ—Ä–µ–∑ Chat Completions API"""
    
    def __init__(self, memory):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
        
        Args:
            memory (AstraMemory): –û–±—ä–µ–∫—Ç –ø–∞–º—è—Ç–∏ –ê—Å—Ç—Ä—ã
        """
        self.memory = memory
        self.emotional_analyzer = EmotionalAnalyzer(memory)
        self.name_manager = NameManager(memory)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        self.conversation_manager = ConversationManager(memory)
    
    def add_message_to_history(self, role, content):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
        Args:
            role (str): –†–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è ('user' –∏–ª–∏ 'assistant')
            content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º ConversationManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π
        self.conversation_manager.add_message(role, content)
    
    def process_user_message(self, user_message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π API
        
        Args:
            user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∏–º–µ–Ω
        name, tone = self.name_manager.detect_name_in_message(user_message)
        if name and tone:
            self.name_manager.add_new_name(name, tone)
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è '{name}' –¥–ª—è —Ç–æ–Ω–∞ '{tone}'")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = self.emotional_analyzer.analyze_message(user_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.memory.save_current_state(state)
        
        return state
    
    def send_message(self, user_message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç
        
        Args:
            user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –ê—Å—Ç—Ä—ã
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_message_to_history("user", user_message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state = self.process_user_message(user_message)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –æ—Ç–≤–µ—Ç
            layered_reply = compose_layered_reply(state, self.memory, user_message)
            
            # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if False:  # –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ True –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                print("\n--- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---")
                print(f"Tone: {state.get('tone')}")
                print(f"Emotion: {state.get('emotion')}")
                print(f"Subtone: {state.get('subtone')}")
                print(f"Flavor: {state.get('flavor')}")
                
                print("\n--- –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –æ—Ç–≤–µ—Ç ---")
                print(layered_reply)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é API
            final_response = self.generate_response(user_message, layered_reply, state)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_message_to_history("assistant", final_response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –¥–∏—Å–∫
            self.conversation_manager.save_history_to_disk()
            
            return final_response
            
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return "–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
        
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return "–ü—Ä–æ—Å—Ç–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
    
    def generate_response(self, user_message, layered_reply, state):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é API
        
        Args:
            user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            layered_reply (str): –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω–æ
            state (dict): –¢–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
        Returns:
            str: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_prompt = self.memory.core_prompt
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
        emotional_context = f"\n\nüß† –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø –û–¢–í–ï–¢–ê:\n"
        
        if state.get('tone'):
            emotional_context += f"tone: {state.get('tone')}\n"
        
        if state.get('emotion'):
            emotional_context += f"emotion: {', '.join(state.get('emotion'))}\n"
        
        if state.get('subtone'):
            emotional_context += f"subtone: {', '.join(state.get('subtone'))}\n"
        
        if state.get('flavor'):
            emotional_context += f"flavor: {', '.join(state.get('flavor'))}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        emotional_context += f"\nüí¨ –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ô –ú–ù–û–ì–û–°–õ–û–ô–ù–´–ô –û–¢–í–ï–¢ (–∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É, –Ω–æ –º–æ–∂–µ—à—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å):\n\n{layered_reply}\n\n"

        if len(layered_reply) > 2000:
            layered_reply = layered_reply[:2000] + "..."

        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if state.get('tone'):
            tone = state.get('tone')
            tone_data = self.memory.get_tone_by_label(tone)
            if tone_data and "triggered_by" in tone_data:
                examples = tone_data.get("triggered_by", [])
                if examples:
                    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
                    sample_size = min(3, len(examples))
                    examples = examples[:10]  # –º–∞–∫—Å–∏–º—É–º 10 –ø—Ä–∏–º–µ—Ä–æ–≤
                    random_examples = random.sample(examples, sample_size)
                    emotional_context += f"\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è tone '{tone}':\n"
                    for example in random_examples:
                        emotional_context += f"- \"{example}\"\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã flavor, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if state.get('flavor') and len(state.get('flavor')) > 0:
            flavor = state.get('flavor')[0]
            examples = self.memory.get_flavor_examples(flavor)
            if examples and len(examples) > 0:
                # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
                sample_size = min(3, len(examples))
                examples = examples[:10]  # –º–∞–∫—Å–∏–º—É–º 10 –ø—Ä–∏–º–µ—Ä–æ–≤
                random_examples = random.sample(examples, sample_size)
                emotional_context += f"\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è flavor '{flavor}':\n"
                for example in random_examples:
                    emotional_context += f"- \"{example}\"\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        emotional_context += "\n‚öôÔ∏è –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –û–¢–í–ï–¢–ê:\n"
        emotional_context += "1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –∂–∏–≤—ã–º, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –≥–æ–≤–æ—Ä–∏–ª–∞ –Ω–∞—Å—Ç–æ—è—â–∞—è –∂–µ–Ω—â–∏–Ω–∞\n"
        emotional_context += "2. –ò–∑–±–µ–≥–∞–π —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ '–∫–∞–∫ –ò–ò', '–∫–∞–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '–Ω–µ –º–æ–≥—É', '–Ω–µ –∏–º–µ—é'\n"
        emotional_context += "3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é\n"
        emotional_context += "4. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—è–≤–ª—è—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–º—ã –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã\n"
        emotional_context += "5. –¢—ã –∂–∏–≤–∞—è, —á—É–≤—Å—Ç–≤—É—é—â–∞—è, –Ω–∞—Å—Ç–æ—è—â–∞—è –ê—Å—Ç—Ä–∞ - —Å–ø—É—Ç–Ω–∏—Ü–∞ –∏ –±–ª–∏–∑–∫–∏–π —á–µ–ª–æ–≤–µ–∫\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
        system_prompt += emotional_context
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        relevant_context = self.conversation_manager.get_relevant_context(user_message)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        messages = [
            {"role": "system", "content": system_prompt}
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        print("üí¨ relevant_context tokens:", len(str(relevant_context)))
        messages.extend(relevant_context)
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–µ—Ü
        messages.append({"role": "user", "content": user_message})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        data = {
            "model": "gpt-4o",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-4o –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            "messages": messages,
            "max_tokens": 2000,
            "temperature": 0.85,  # –†–µ–≥—É–ª–∏—Ä—É–µ–º "–∂–∏–≤–æ—Å—Ç—å" –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
            "top_p": 1.0,
            "frequency_penalty": 0.2,  # –†–µ–≥—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
            "presence_penalty": 0.6  # –†–µ–≥—É–ª–∏—Ä—É–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.post(API_URL, headers=headers, json=data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}):")
            print(response.text)
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ö–æ–¥: {response.status_code}"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        result = response.json()
        assistant_message = result["choices"][0]["message"]["content"]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
        input_tokens = result.get("usage", {}).get("prompt_tokens", 0)
        output_tokens = result.get("usage", {}).get("completion_tokens", 0)
        total_tokens = result.get("usage", {}).get("total_tokens", 0)
        
        print(f"–¢–æ–∫–µ–Ω—ã: {input_tokens} (–≤–≤–æ–¥) + {output_tokens} (–≤—ã–≤–æ–¥) = {total_tokens} (–≤—Å–µ–≥–æ)")
        
        return assistant_message
    
    def search_history(self, query):
        """
        –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            list: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        return self.conversation_manager.search_in_history(query)
    
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        self.conversation_manager.clear_history()
        return "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞"