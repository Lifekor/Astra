"""
–ê—Å—Ç—Ä–∞ - –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç—å—é –∏ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π (gpt-4 + gpt-4o)

–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å, —Å–æ–±–∏—Ä–∞—é—â–∏–π –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
"""
import os
import sys
from load_env import load_dotenv
load_dotenv()

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏
try:
    from astra_memory import AstraMemory
    from astra_chat import AstraChat
    from astra_command_parser import AstraCommandParser
    from emotional_analyzer import EmotionalAnalyzer
    from name_manager import NameManager
    from intent_analyzer import IntentAnalyzer
    from memory_extractor import MemoryExtractor
    from dual_model_integrator import DualModelIntegrator
    from astra_mcp_memory import AstraMCPMemory
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)

class AstraInterface:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ê—Å—Ç—Ä—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT"""
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –ê—Å—Ç—Ä—ã...")
        self.memory = AstraMemory()
        
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —ç–º–æ—Ü–∏–π...")
        self.emotional_analyzer = EmotionalAnalyzer(self.memory)
        
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–º–µ–Ω...")
        self.name_manager = NameManager(self.memory)
        
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        self.intent_analyzer = IntentAnalyzer(os.environ.get("OPENAI_API_KEY"))
        
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏...")
        self.memory_extractor = MemoryExtractor(self.memory, os.environ.get("OPENAI_API_KEY"))
        
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞...")
        self.chat = AstraChat(self.memory)

        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏...")
        self.mcp_memory = AstraMCPMemory()
        print(f"–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –≥–æ—Ç–æ–≤–∞: {self.mcp_memory.get_stats()}")

        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π...")
        self.dual_model_integrator = DualModelIntegrator(
            self.memory,
            self.intent_analyzer,
            self.memory_extractor,
            os.environ.get("OPENAI_API_KEY")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π –≤ —á–∞—Ç
        self.chat.dual_model_integrator = self.dual_model_integrator
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ send_message
        self._patch_send_message()
        
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∫–æ–º–∞–Ω–¥...")
        self.command_parser = AstraCommandParser(self.memory)
        
        print("–ê—Å—Ç—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É! (–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω–∞)")
    
    def _patch_send_message(self):
        """–ü–∞—Ç—á–∏—Ç –º–µ—Ç–æ–¥ send_message –≤ AstraChat –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π"""
        original_send_message = self.chat.send_message
        
        def enhanced_send_message(self, user_message):
            """
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
            
            Args:
                user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
            Returns:
                str: –û—Ç–≤–µ—Ç –ê—Å—Ç—Ä—ã
            """
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_message_to_history("user", user_message)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                state = self.process_user_message(user_message)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
                conversation_context = self.conversation_manager.get_api_context() if hasattr(self.conversation_manager, 'get_api_context') else None
                
                # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–æ–º –º–æ–¥–µ–ª–µ–π: '{user_message}'")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
                result = self.dual_model_integrator.generate_integrated_response(
                    user_message,
                    conversation_context,
                    state
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                final_response = result["response"]
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: intent={result['intent']}, memory={result['memory_used']}, style={result['style_mirroring']}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if "emotional_state" in result:
                    self.memory.save_current_state(result["emotional_state"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_message_to_history("assistant", final_response)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –¥–∏—Å–∫
                if hasattr(self.conversation_manager, 'save_history_to_disk'):
                    self.conversation_manager.save_history_to_disk()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç
                if hasattr(self.memory, 'diary') and self.memory.diary:
                    conversation_data = {
                        "user_message": user_message,
                        "response": final_response,
                        "emotional_state": result.get("emotional_state", {})
                    }
                    
                    should_remember, diary_type, reason = self.memory.diary.should_remember(conversation_data)
                    if should_remember:
                        self.memory.diary.add_diary_entry(
                            diary_type,
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n\n–ê—Å—Ç—Ä–∞: {final_response}",
                            ["–¥–∏–∞–ª–æ–≥", diary_type]
                        )
                        print(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫ {diary_type}: {reason}")
                
                return final_response
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                import traceback
                traceback.print_exc()
                
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                print("–ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω–æ–π —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                return original_send_message(user_message)
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
        import types
        self.chat.send_message = types.MethodType(enhanced_send_message, self.chat)
        print("‚úÖ –ú–µ—Ç–æ–¥ send_message –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π")
    
    def process_message(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –ê—Å—Ç—Ä—ã
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        command_result = self.command_parser.parse_command(message)
        if command_result:
            return command_result
        
        # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        return self.chat.send_message(message)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üåü Astra - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –¥–≤—É–º—è –º–æ–¥–µ–ª—è–º–∏ GPT")
    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ê—Å—Ç—Ä—ã
    try:
        astra = AstraInterface()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ê—Å—Ç—Ä—ã: {e}")
        sys.exit(1)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\nAstra: –ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å. –Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —Ç—ã —Ä—è–¥–æ–º...")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = input("\n–í—ã: ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–π—Ç–∏
            if user_message.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                print("\nAstra: –î–æ –≤—Å—Ç—Ä–µ—á–∏! –Ø –±—É–¥—É –∂–¥–∞—Ç—å —Ç–≤–æ–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è... üåô")
                break
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = astra.process_message(user_message)
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –ê—Å—Ç—Ä—ã
            print(f"\nAstra: {response}")
            
        except KeyboardInterrupt:
            print("\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        
        except Exception as e:
            print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            continue


if __name__ == "__main__":
    main()
