"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è astra_chat.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–≤—É–º—è –º–æ–¥–µ–ª—è–º–∏ GPT
"""
import os
import sys
import types

def update_astra_chat():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥—É–ª—å astra_chat.py –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT"""
    try:
        from astra_app import AstraInterface
        from intent_analyzer import IntentAnalyzer
        from memory_extractor import MemoryExtractor
        from dual_model_integrator import DualModelIntegrator
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ê—Å—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        astra = AstraInterface()
        print("‚úÖ AstraInterface —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        intent_analyzer = IntentAnalyzer(os.environ.get("OPENAI_API_KEY"))
        memory_extractor = MemoryExtractor(astra.memory, os.environ.get("OPENAI_API_KEY"))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π
        dual_model_integrator = DualModelIntegrator(
            astra.memory,
            intent_analyzer,
            memory_extractor,
            os.environ.get("OPENAI_API_KEY")
        )
        
        print("‚úÖ –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è AstraChat.send_message
        def enhanced_send_message(self, user_message):
            """
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
            
            Args:
                user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
            Returns:
                str: –û—Ç–≤–µ—Ç –ê—Å—Ç—Ä—ã
            """
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_message_to_history("user", user_message)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                state = self.process_user_message(user_message)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
                conversation_context = self.conversation_manager.get_api_context() if hasattr(self.conversation_manager, 'get_api_context') else None
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
                result = self.dual_model_integrator.generate_integrated_response(
                    user_message,
                    conversation_context,
                    state
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                final_response = result["response"]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if "emotional_state" in result:
                    self.memory.save_current_state(result["emotional_state"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_message_to_history("assistant", final_response)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –¥–∏—Å–∫
                if hasattr(self.conversation_manager, 'save_history_to_disk'):
                    self.conversation_manager.save_history_to_disk()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç
                if hasattr(self.memory, 'diary') and self.memory.diary:
                    conversation_data = {
                        "user_message": user_message,
                        "response": final_response,
                        "emotional_state": result.get("emotional_state", {})
                    }
                    
                    should_remember, diary_type, reason = self.memory.diary.should_remember(conversation_data)
                    if should_remember:
                        self.memory.diary.add_diary_entry(
                            diary_type,
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n\n–ê—Å—Ç—Ä–∞: {final_response}",
                            ["–¥–∏–∞–ª–æ–≥", diary_type]
                        )
                        print(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫ {diary_type}: {reason}")
                
                return final_response
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                import traceback
                traceback.print_exc()
                return "–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        def init_dual_model_integrator(self, memory, intent_analyzer, memory_extractor):
            """
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π
            
            Args:
                memory (AstraMemory): –û–±—ä–µ–∫—Ç –ø–∞–º—è—Ç–∏ –ê—Å—Ç—Ä—ã
                intent_analyzer (IntentAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π
                memory_extractor (MemoryExtractor): –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            """
            from dual_model_integrator import DualModelIntegrator
            self.dual_model_integrator = DualModelIntegrator(
                memory,
                intent_analyzer,
                memory_extractor,
                os.environ.get("OPENAI_API_KEY")
            )
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ initialize_components –≤ AstraInterface
        def enhanced_initialize_components(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ê—Å—Ç—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π"""
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –ê—Å—Ç—Ä—ã...")
            self.memory = __import__('astra_memory').AstraMemory()
            
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —ç–º–æ—Ü–∏–π...")
            self.emotional_analyzer = __import__('emotional_analyzer').EmotionalAnalyzer(self.memory)
            
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–º–µ–Ω...")
            self.name_manager = __import__('name_manager').NameManager(self.memory)
            
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
            intent_analyzer = __import__('intent_analyzer').IntentAnalyzer(os.environ.get("OPENAI_API_KEY"))
            
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏...")
            memory_extractor = __import__('memory_extractor').MemoryExtractor(self.memory, os.environ.get("OPENAI_API_KEY"))
            
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞...")
            self.chat = __import__('astra_chat').AstraChat(self.memory)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π –≤ —á–∞—Ç–µ
            self.chat.init_dual_model_integrator = types.MethodType(init_dual_model_integrator, self.chat)
            self.chat.init_dual_model_integrator(self.memory, intent_analyzer, memory_extractor)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ send_message –≤ —á–∞—Ç–µ
            self.chat.send_message = types.MethodType(enhanced_send_message, self.chat)
            
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∫–æ–º–∞–Ω–¥...")
            self.command_parser = __import__('astra_command_parser').AstraCommandParser(self.memory)
            
            print("–ê—Å—Ç—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É!")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∫ AstraInterface
        AstraInterface.initialize_components = enhanced_initialize_components
        
        # –û–±–Ω–æ–≤–ª—è–µ–º __init__ –¥–ª—è AstraInterface, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        original_init = AstraInterface.__init__
        
        def enhanced_init(self):
            """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ê—Å—Ç—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT...")
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —á–∞—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ __init__
            self.initialize_components()
        
        # –ó–∞–º–µ–Ω—è–µ–º __init__ –≤ AstraInterface
        AstraInterface.__init__ = enhanced_init
        
        print("‚úÖ –ú–µ—Ç–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è AstraInterface
        patch_content = """
# –ü–∞—Ç—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT –≤ –ê—Å—Ç—Ä–µ
import types
import os

def init_dual_model_integrator(self, memory, intent_analyzer, memory_extractor):
    \"\"\"
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π
    
    Args:
        memory (AstraMemory): –û–±—ä–µ–∫—Ç –ø–∞–º—è—Ç–∏ –ê—Å—Ç—Ä—ã
        intent_analyzer (IntentAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        memory_extractor (MemoryExtractor): –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    \"\"\"
    from dual_model_integrator import DualModelIntegrator
    self.dual_model_integrator = DualModelIntegrator(
        memory,
        intent_analyzer,
        memory_extractor,
        os.environ.get("OPENAI_API_KEY")
    )
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def enhanced_send_message(self, user_message):
    \"\"\"
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
    
    Args:
        user_message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –û—Ç–≤–µ—Ç –ê—Å—Ç—Ä—ã
    \"\"\"
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.add_message_to_history("user", user_message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        state = self.process_user_message(user_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        conversation_context = self.conversation_manager.get_api_context() if hasattr(self.conversation_manager, 'get_api_context') else None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
        result = self.dual_model_integrator.generate_integrated_response(
            user_message,
            conversation_context,
            state
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        final_response = result["response"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if "emotional_state" in result:
            self.memory.save_current_state(result["emotional_state"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.add_message_to_history("assistant", final_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –¥–∏—Å–∫
        if hasattr(self.conversation_manager, 'save_history_to_disk'):
            self.conversation_manager.save_history_to_disk()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç
        if hasattr(self.memory, 'diary') and self.memory.diary:
            conversation_data = {
                "user_message": user_message,
                "response": final_response,
                "emotional_state": result.get("emotional_state", {})
            }
            
            should_remember, diary_type, reason = self.memory.diary.should_remember(conversation_data)
            if should_remember:
                self.memory.diary.add_diary_entry(
                    diary_type,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\\n\\n–ê—Å—Ç—Ä–∞: {final_response}",
                    ["–¥–∏–∞–ª–æ–≥", diary_type]
                )
                print(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫ {diary_type}: {reason}")
        
        return final_response
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return "–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

def patch_astra_chat():
    \"\"\"–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ç—á –∫ AstraChat\"\"\"
    from astra_app import AstraInterface
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ê—Å—Ç—Ä—ã
    astra = AstraInterface()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    from intent_analyzer import IntentAnalyzer
    from memory_extractor import MemoryExtractor
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    intent_analyzer = IntentAnalyzer(os.environ.get("OPENAI_API_KEY"))
    memory_extractor = MemoryExtractor(astra.memory, os.environ.get("OPENAI_API_KEY"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∫ AstraChat
    astra.chat.init_dual_model_integrator = types.MethodType(init_dual_model_integrator, astra.chat)
    astra.chat.send_message = types.MethodType(enhanced_send_message, astra.chat)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π
    astra.chat.init_dual_model_integrator(astra.memory, intent_analyzer, memory_extractor)
    
    print("‚úÖ –ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ AstraChat")
    return astra
"""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–∞—Ç—á–∞
        with open("astra_dual_model_patch.py", "w", encoding="utf-8") as f:
            f.write(patch_content)
        
        print("‚úÖ –°–∫—Ä–∏–ø—Ç –ø–∞—Ç—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ astra_dual_model_patch.py")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ---")
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            from dual_model_integrator import DualModelIntegrator
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π –≤ —á–∞—Ç–µ
            astra.chat.init_dual_model_integrator = types.MethodType(init_dual_model_integrator, astra.chat)
            astra.chat.init_dual_model_integrator(astra.memory, intent_analyzer, memory_extractor)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ send_message
            original_send_message = astra.chat.send_message
            astra.chat.send_message = types.MethodType(enhanced_send_message, astra.chat)
            
            print("‚úÖ –ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            test_message = "–ü—Ä–∏–≤–µ—Ç, –ê—Å—Ç—Ä–∞! –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?"
            try:
                print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: '{test_message}'")
                response = astra.chat.send_message(test_message)
                print(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(response)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                with open("test_dual_model_response.txt", "w", encoding="utf-8") as f:
                    f.write(response)
                print("–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_dual_model_response.txt")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                astra.chat.send_message = original_send_message
                raise
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è: {e}")
        import traceback
        traceback.print_exc()
        return False

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è astra_chat.py –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π GPT...")
    
    success = update_astra_chat()
    
    if success:
        print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ê—Å—Ç—Ä—É —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: python astra_app.py")
        print("  2. –ò–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –ø–∞—Ç—á –≤—Ä—É—á–Ω—É—é: from astra_dual_model_patch import patch_astra_chat; astra = patch_astra_chat()")
    else:
        print("\n‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")